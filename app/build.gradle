plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.kotlin.serialization)
    alias(libs.plugins.ksp)
    alias(libs.plugins.githubRelease)
}

sourceSets {
    main {
        java.srcDir("src/main/kotlin")
        resources.srcDir("src/main/res")
    }
    test {
        java.srcDir("src/test/kotlin")
    }
}

dependencies {
    implementation(project(":core"))
    implementation(project(":convert"))

    implementation(project(":render:core"))
    implementation(project(":render:ir"))
    implementation(project(":render:pdf"))
    implementation(project(":render:svg"))

    implementation(libs.kotlin.stdlib)
    implementation(libs.kotlin.coroutines)
    implementation(libs.kotlin.serialization)

    implementation(libs.log4j.api)
    implementation(libs.log4j.core)
    implementation(libs.log4j.kotlin)

    ksp(libs.dagger.compiler)
    implementation(libs.dagger.lib)

    testImplementation(libs.kotlin.test.junit)

    implementation(libs.jcommander)
    implementation(libs.imageScalingLib)
}

kotlin {
    compilerOptions {
        optIn.add("kotlin.ExperimentalUnsignedTypes")
        optIn.add("kotlin.contracts.ExperimentalContracts")
    }
}

def mainClassName = "com.maltaisn.swfconvert.app.MainKt"
tasks.register("run", JavaExec) {
    dependsOn("updateVersionRes")

    mainClass = mainClassName
    classpath = files(sourceSets.main.runtimeClasspath, sourceSets.main.resources)
    standardInput = System.in
    setIgnoreExitValue(true)

    // Get program test arguments defined in dev.properties.
    def propFile = project.rootProject.file("dev.properties")
    if (propFile.exists()) {
        def properties = new Properties()
        properties.load(propFile.newInputStream())
        setWorkingDir(properties.getProperty("app-test-working-dir"))
        setArgsString(properties.getProperty("app-test-args"))
    }

    if ("mac" in System.getProperty("os.name").toLowerCase()) {
        jvmArgs = "-XstartOnFirstThread"
    }
}

tasks.register("dist", Jar) {
    dependsOn("updateVersionRes")

    from(files(sourceSets.main.output.classesDirs))
    from(files(sourceSets.main.resources.srcDirs))
    from(configurations.runtimeClasspath.collect { if (it.directory) it else zipTree(it) })

    manifest.attributes(
            "Main-Class": mainClassName,
            "Multi-Release": true
    )
    archiveBaseName.set("swf-convert")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register("updateVersionRes") {
    doLast {
        def versionResFile = file("src/main/res/version.txt")
        versionResFile.write(appVersion)
    }
}

// Publish a new release to Github, using the lastest defined appVersion property,
// a git tag, and the release notes in CHANGELOG.md.
githubRelease {
    if (project.hasProperty("githubReleasePluginToken")) {
        token = githubReleasePluginToken
    }
    owner = "maltaisn"
    repo = "swf-convert"

    tagName = "v$appVersion"
    targetCommitish = "master"
    releaseName = "v$appVersion"

    body = provider {
        // Get release notes for version from changelog file.
        def changelog = file("../CHANGELOG.md")
        def lines = changelog.readLines()
        def versionChanges = new StringBuilder()
        def foundVersion = false
        for (line in lines) {
            if (foundVersion && line ==~ /^#+\s*v.+$/) {
                break
            } else if (line ==~ /^#+\s*v$appVersion$/) {
                foundVersion = true
            } else if (foundVersion) {
                versionChanges.append(line)
                versionChanges.append('\n')
            }
        }
        if (!foundVersion) {
            throw new GradleException("No release notes for version $appVersion")
        }
        return versionChanges.toString().trim()
    }

    releaseAssets = "${layout.buildDirectory}/libs/swf-convert.jar"

    overwrite = true
}
tasks.githubRelease {
    dependsOn("build", "dist")
}
